function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useMemo } from "react";
import { ScrollView, StyleSheet, Text, View } from "react-native";
import SyntaxHighlighter from "react-syntax-highlighter";
import { trimNewlines } from "trim-newlines";
import { getRNStylesFromHljsStyle } from "./../utils/styles";
export const CodeHighlighter = _ref => {
  let {
    children,
    textStyle,
    hljsStyle,
    scrollViewProps,
    containerStyle,
    ...rest
  } = _ref;
  const stylesheet = useMemo(() => getRNStylesFromHljsStyle(hljsStyle), [hljsStyle]);
  const getStylesForNode = node => {
    const classes = node.properties?.className ?? [];
    return classes.map(c => stylesheet[c]).filter(c => !!c);
  };
  const renderNode = function (nodes) {
    let keyPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "row";
    return nodes.reduce((acc, node, index) => {
      const keyPrefixWithIndex = `${keyPrefix}_${index}`;
      if (node.children) {
        const styles = StyleSheet.flatten([textStyle, {
          color: stylesheet.hljs?.color
        }, getStylesForNode(node)]);
        acc.push( /*#__PURE__*/React.createElement(Text, {
          style: styles,
          key: keyPrefixWithIndex
        }, renderNode(node.children, `${keyPrefixWithIndex}_child`)));
      }
      if (node.value) {
        acc.push(trimNewlines(String(node.value)));
      }
      return acc;
    }, []);
  };
  const renderer = props => {
    const {
      rows
    } = props;
    return /*#__PURE__*/React.createElement(ScrollView, _extends({}, scrollViewProps, {
      horizontal: true,
      contentContainerStyle: [stylesheet.hljs, scrollViewProps?.contentContainerStyle, containerStyle]
    }), /*#__PURE__*/React.createElement(View, null, renderNode(rows)));
  };
  return /*#__PURE__*/React.createElement(SyntaxHighlighter, _extends({}, rest, {
    renderer: renderer,
    CodeTag: View,
    PreTag: View,
    style: {},
    testID: "react-native-code-highlighter"
  }), children);
};
export default CodeHighlighter;
//# sourceMappingURL=CodeHighlighter.js.map